<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="blogReply">
	<cacheModel id="user-cache" type="LRU" readOnly="true"
		serialize="false">
		<flushInterval hours="24" />
		<property value="500" name="size" />
	</cacheModel>
	
	
	<typeAlias alias="blogReply" type="com.ulewo.entity.BlogReply" />
	
	<!-- 添加博客分类 -->
	<insert id="addPeply" parameterClass="blogReply">
		<selectKey keyProperty="id" resultClass="java.lang.Integer" type="post">
      		SELECT LAST_INSERT_ID()
    	 </selectKey>
        <![CDATA[
        insert into blog_reply (blogid,content,posttime,blogauthor,userid,username,atuserid,sourcefrom)
		values(#blogId#,#content#,#postTime#,#blogAuthor#,#userId#,#userName#,#atUserId#,#sourceFrom#);
        ]]>
		
	</insert>
	
	<!-- 通过博客ID查询回复 -->
	<select id="queryReplyByBlogId"  resultClass="blogReply" parameterClass="java.util.Map">
		select m.id,m.userid,m.blogid,m.content,m.sourcefrom,
		(case when m.userid is not null then u.username else m.username end)as userName,
		(case when m.userid is not null then u.userlittleicon else '' end)as reUserIcon,
		m.atuserid,
		au.username as atusername,
		m.posttime 
		from blog_reply m left join user u on m.userid = u.userid left join user au on m.atuserid=au.userid where m.blogid = #blogId# 
		order by posttime desc limit #offset#,#pageSize#
		
	</select>
	
	<!-- 通过ID查询回复 -->
	<select id="queryPeplyById"  resultClass="blogReply" parameterClass="java.lang.Integer">
		select * from blog_reply  where id = #id#
	</select>
	
	<!-- 查询数量 -->
	<select id="queryReplyCountByBlogId"  resultClass="java.lang.Integer" parameterClass="java.lang.Integer">
		select count(id) from blog_reply  where blogid = #blogId#
	</select>
	
	<!-- 删除回复 -->
	<delete id="deleteReply" parameterClass="java.util.Map">
		delete from blog_reply where id = #id#  and blogauthor = #blogAuthor#
	</delete>
	
	<!-- 通过用户查询所有回复 -->
	<select id="queryAllReply"  resultClass="blogReply" parameterClass="java.util.Map">
		select r.*,u.userlittleicon as reUserIcon,u.username as userName,b.title as blogTitle
		from blog_reply r left join user u on r.userid = u.userid left join blog_article b on b.id=r.blogid 
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="blogAuthor">
          	   <![CDATA[r.blogauthor =  #blogAuthor#  ]]>
			</isNotEmpty>
		</dynamic>	
		order by posttime desc limit #offSet#,#pageSize#
	</select>
	
	<select id="queryAllReplyCount"  resultClass="java.lang.Integer" parameterClass="java.util.Map">
		select count(id) from blog_reply
		<dynamic prepend="where">
			<isNotEmpty prepend="and" property="blogAuthor">
          	   <![CDATA[blogauthor =  #blogAuthor#  ]]>
			</isNotEmpty>
		</dynamic>	
	</select>
	
	<!--根据userId查询回复-->
	<select id="queryReBlogByUserId"  resultClass="blogReply" parameterClass="java.util.Map">
		select b.title as blogTitle,r.blogid,r.userid as userId,u.username as userName,
		r.posttime as postTime,u.userlittleicon as reUserIcon,r.content as content,
		r.atuserid,ru.username as atUserName
		from blog_reply r inner join blog_article b on r.blogid=b.id
		inner join user u on u.userid=r.userid
		left outer join user ru on r.atuserid = ru.userid
		where r.userid = #userId#
		<isEqual prepend="or" property="includeme" compareValue="0">
         	r.userid in (select friendid from user_friend where userid = #userId#)
		</isEqual>
		order by posttime desc limit #offset#,#total#
	</select>
	
	<!--根据userId查询回复数量-->
	<select id="queryReBlogCountByUserId"  resultClass="java.lang.Integer" parameterClass="java.util.Map">
		select count(id) from blog_reply b where b.userid = #userId#
		<isEqual prepend="or" property="includeme" compareValue="0">
         	b.userid in (select friendid from user_friend where userid = #userId#)
		</isEqual>
	</select>
</sqlMap>